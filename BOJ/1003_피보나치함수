아래의 코드로 푼다음 고수의 코드를 봤다. 이렇게 풀면 훨씬 빠르다...(허탈)

#include <stdio.h>

int T,N;
int dp[41][2];

int main() {

    scanf("%d",&T);

    dp[0][0] = 1;
    dp[0][1] = 0;
    dp[1][0] = 0;
    dp[1][1] = 1;

    for(int i=2;i<=40;i++)
    {
        dp[i][0] = dp[i-2][0] + dp[i-1][0];
        dp[i][1] = dp[i-2][1] + dp[i-1][1];
    }

    while(T--)
    {
        scanf("%d",&N);
        printf("%d %d\n",dp[N][0],dp[N][1]);
    }
	return 0;	
}


---

2개의 값의 쌍을 DP 해야 하는 문제다.
배우고있는 STL을 적극활용해서 vector<pair>을 만들고
pair을 return 하는식으로 구현했다.

#include <iostream>
#include <vector>
using namespace std;


vector<pair<int, int>> p(41);

pair<int,int> fibonacci(int n) {
    pair<int, int> tmp(0,0);
    if (n == 0) {
        p[0] = make_pair(1, 0);
        return p[0];
    }
    else if (n == 1) {
        p[1] = make_pair(0, 1);
        return p[1];
    }
    else if (p[n] != tmp) {
        return p[n];
    }
    else {
        return p[n] = make_pair(fibonacci(n - 1).first + fibonacci(n - 2).first, fibonacci(n - 1).second + fibonacci(n - 2).second);
    }
}
int main()
{
    int T;
    cin >> T;
    for (int i = 0; i < T; i++) {
        int n;
        cin >> n;
        pair<int, int> sum;
        sum = fibonacci(n);
        cout << sum.first << ' ' << sum.second << '\n';
    }
    return 0;
}
