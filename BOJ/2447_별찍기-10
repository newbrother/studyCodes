//계속 쉬운 별찍기만 하다가 갑자기 어려워져서 깜짝놀랐다.
//프렉탈식으로 커지는데, 중간에 빈부분을 n에 맞게 구현하는데 애먹었다.
//더 효율적인 코드가 있어 가져왔다.

//1번 
#include <stdio.h>
char data[3000][3000];
void rec(int, int, int);

int main()
{
    int n, i, j;
    scanf("%d", &n );
    if(n==1){
        printf("*");
    }else{
        for(i =0; i < n; i++)
        {
            for(j = 0; j < n; j++)
            {
                data[i][j] = ' ';
            }
        }
        rec(n, 0,0);
        for(i =0; i < n; i++)
        {
            for(j = 0; j < n; j++)
            {
                printf("%c",data[i][j]);
            }
            printf("%c", '\n');
        }
    }
    
    return 0;
}

void rec(int n, int i, int j)
{
    if (n == 3)
    {
        data[i][j] = '*';
        data[i][j+1] = '*';
        data[i][j+2] = '*';
        data[i+1][j] = '*';
        data[i+1][j+2] = '*';
        data[i+2][j] = '*';
        data[i+2][j+1] = '*';
        data[i+2][j+2] = '*';
        return;
    }
    else{
        rec(n/3, i, j);
        rec(n/3, i,j+n/3);
        rec(n/3, i,j+2*n/3);
        rec(n/3, i+n/3,j);
        rec(n/3, i+n/3,j+2*n/3);
        rec(n/3, i+2*n/3,j);
        rec(n/3, i+2*n/3,j+n/3);
        rec(n/3, i+2*n/3,j+2*n/3);
        return;
    }
}


//2번 
#include<stdio.h>
#define MAX 3*3*3*3*3*3*3*3

char ch[MAX + 1][MAX + 1];

void calc(int N, int ci, int cj) {
	int i, j, M;
	if (N == 1) {
		ch[ci][cj] = '*';
		return;
	}

	M = N / 3;

	for (i = 0; i < 3; i++)
		for (j = 0; j < 3; j++)
			if (i != 1 || j != 1)
				calc(M, ci+i*M, cj+j*M);

}

int main() {
	int N, i, j;
	scanf("%d", &N);

	for (i = 0; i < N; i++)
		for (j = 0; j < N; j++)
			ch[i][j] = ' ';

	calc(N, 0, 0);

	for (i = 0; i < N; i++)
			printf("%s\n", ch[i]);

	return 0;
}
