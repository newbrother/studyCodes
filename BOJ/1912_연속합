//Dp문제 , 피라미드 구조를 생각.
즉, 일단 max는 저장해놓고 저장된 부분합+현재값과 현재값중에 큰것을 계속 저장해간다.
현재값이 더크면 부분합이 필요없기 때문이다.
그때부터 다시 부분합을 또 저장해가는 식이다.
(max는 항상 체크하며 갱신)


#include <iostream>
using namespace std;

int arr[100000];
int M[100000]; //max부분합

int main() {
    int n;
    cin>>n;
    int i;
    for(i=0;i<n;i++){
        cin>>arr[i];
    }
    M[0]=arr[0];
    int m=arr[0];
    for(i=1;i<n;i++){
        M[i] = max(M[i-1]+arr[i],arr[i]);
        if(m<M[i])
            m=M[i];
    }
    cout<<m;
    return 0;
}
