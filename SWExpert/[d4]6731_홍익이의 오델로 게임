//3일동안 끙끙 앓은 문제...해결아이디어는 30분만에 짰는데 시간초과가 계속 났다 
//최적화를 위해서 코드 컷팅을 계속해서 시도했지만 실패.
//O(n^2)으로밖에 못푸는데 시간초과가 나길래 O(nlog)로 할수있는 새로운 방법이있나 꿈에서도 생각했다.

//해결의 keypoint는 x총합 배열과 y총합 배열을 만들어서 계산하는 것이었다.

//맨아래의 틀린코드 같은 경우 input배열을 처리하면서 x만 계산하고,
//정답 계산 직전에 y를 한번더 계산했다.
//하지만 정답코드는 input배열을 처리하면서 x,y를 각각 배열에 더하면서 한번에 처리했다.
//즉 정답코드는 2*n^2 번 실행되는 반면, 틀린코드는 n*2n + n*2n = 4*n^2 이다. 두배가 차이난다.
//4n^2 -> 2n^2로 만들 수 있는 아이디어 싸움이었다.


#include <stdio.h>
char input[1001][1001]; //입력받을배열
int arr[1001][1001]; //검은돌(B)숫자를 기록할 배열

int main() {
    int t;
    scanf("%d", &t);
    for (int caseCnt = 1; caseCnt <= t; caseCnt++) {
        int n;
        int cnt = 0;
        scanf("%d", &n);
        int i, j;
        int x[1001] = { 0 }, y[1001] = { 0 }; //x:가로Sum, y:세로Sum
        for (i = 0; i < n; i++) {
            scanf("%s", input[i]);
        }
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                if (input[i][j] == 'B') {
                    arr[i][j] = -1;  //검은돌이 있는곳은 가로+세로했을때 중복되므로 1을 빼준다.
                    x[i]++;
                    y[j]++;
                }
                else {
                    arr[i][j] = 0; //흰돌이라면 0으로 초기화 해준다.
                }
            }
        }
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                arr[i][j] += x[i] + y[j];
                if (arr[i][j] % 2 == 1) { //가로+세로의 검은돌 개수를 더했을때 홀수개의 숫자가 최소 뒤집는 수다.
                    cnt++;
                }
            }
        }
        printf("#%d %d\n", caseCnt, cnt);
    }
}

//아래는 실패한 코드이다...
//밑의 주석의 방법이 틀렸나보다...케이스 빼고 n^2승에 예외처리 까지했는데 시간초과가 나서 실패
//타겟행렬의 가로,세로의 B(1)의 개수를 더한값이 홀수인것의 개수를 구하면 된다.

#include <stdio.h>
char input[1001][1001];
int arr2[1001][1001];

int main() {
    int t;
    scanf("%d", &t);
    for (int caseCnt = 1; caseCnt <= t; caseCnt++) {
        int n;
        int cnt = 0;
        scanf("%d", &n);
        int i, j;
        int x = 0, y = 0;
        int bCnt = 0;

        for (i = 0; i < n; i++) {
            scanf("%s", input[i]);
        }
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                if (input[i][j] == 'B') {
                    arr2[i][j] = -1;
                    x++;
                }
                else {
                    arr2[i][j] = 0;
                }
            }
            for (j = 0; j < n; j++) {
                arr2[i][j] += x;
            }
            bCnt += x;
            x=0;
        }
        if (bCnt == n*n) {
            printf("#%d %d\n", caseCnt, bCnt);
            continue;
        }

        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                if (input[j][i] == 'B')
                    y++;
            }
            for (j = 0; j < n; j++) {
                arr2[j][i] += y;
                if (arr2[j][i] % 2 == 1) {
                    cnt++;
                }
            }
            y = 0;
        }
        
        printf("#%d %d\n", caseCnt, cnt);
    }

}
