//is : 타입캐스팅 : 인스턴스의 타입을 확인하는 용도

//as : 업캐스팅 : 부모클래스의 인스턴스로 사용할 수 있도록 컴파일러에게 타입정보를 전환.

//as? , as! : 다운캐스팅

//assert(someInt == 0 맞으면 계속진행 , 아닐경우 출력문 "error" (안써도됨) ), 디버깅모드에서만 작동
//배포환경에서도 작동되는 precondition 함수도 있음.

//guard : early exit, else문에 return, break가 필수
//guard let 조건들 else{ return }
//guard와 if let의 차이는 if let은 구문외부에서 언랩핑된 값을 사용 불가, guard는 가능.

//protocol : 특정 역할을 수행하기 위한 매서드, 프로퍼티, 기타 요구사항등 청사진 ( 이 기능이 꼭필요해, 이기능을 구현해 놨어야해)
//구조체,클래스,열거형은 프로토콜을 채택(Adopted)가능,  어떤 프로토콜의 요구사항을 모두 따르는 타입을 Conform(준수한다)고 표현.
//문법 : protocol 프로토콜이름{ 정의 }  , C++에서 헤더같은거인듯. 정의만한다.
//프로토콜은 클래스와 다르게 다중 상속이 가능

//Extension : 구조체, 클래스, 열거형, 프로토콜 타입에 새로운 기능(연산타입프로퍼티,연산인스턴스프로퍼티,타입메서드,인스턴스메서드,이니셜라이져,서브스크립트,중첩타입,특정프로토콜준수)을
//추가할 수 있는 기능. 타입만 알고있으면 타입기능 확장가능.
//문법 : extension 확장타입이름 { 새로운기능구현 }
